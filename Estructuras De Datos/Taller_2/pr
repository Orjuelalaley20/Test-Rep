// 2. Try to find a pivot
  finished = false;
  v_aux = s.top();
  s.pop();
  do
  {
    q.push(v_aux);
    last_v = v_aux;
    if (s.empty())
    {
      finished = true;
      break;
    }
    else
    {
      // 2.1 Pop value from stack and store it into 'v_aux'
      /** TODO #2 **/
      for (int i = 0; i < lst; i++)
        s.push(lst);

      while (!s.empty())
      {
        v_aux += s.top();
        s.pop();
      }

    } // fi

  } while (v_aux > last_v);

  // 2.5. if pivot has been found...
  if (!finished)
  {
    pivot = v_aux;

    // 3. Find a value just below pivot
    /** TODO #3 **/
    for (int i = 0; i < pivot; i++)
      q.push(pivot);

    while (!q.empty() < pivot)
    {
      pivot += q.top();
      q.pop();
    }
    // 4. Put it into stack
    s.push(v_aux);

    // 5. Put pivot back to queue
    q.push(pivot);

    // 6. Find the value just above pivot
    /** TODO #4 **/
    for (int i = 0; i < pivot; i++)
      q.push(pivot);

    while (!q.empty() > pivot)
    {
      pivot += q.top();
      q.pop();
    }

    // 7. Put it into stack
    s.push(v_aux);

  } // fi

  // 8. Finish filling the stack by emptying the queue
  /** TODO #5 **/
  for (int i = 0; i < last_v; ++i)
    s.push(i);
  while (!s.empty())
  {
    q.top();
    q.pop();
  }

  // 9. Fill the final answer in reverse order by emptying the stack
  /** TODO #6 **/
  for (int i = 0; i < last_v; ++i)
    s.push(res);
  while (!s.empty())
  {
    s.top(res);
    s.pop(res);
  }
  // 10. Return
  return (res);
}

#endif

// -------------------------------------------------------------------------
template <class TList>
unsigned long ComputeNumberOfAnagrams(const TList &lst)
{
  /** TODO #7 **/
  
  return 0;
}

// __NEXTANAGRAM__HXX__

// eof - NextAnagram.hxx